snippet edge "Graph - unweighted edge"
struct Edge{int to,nxt;}e[${1:M}${2:*2}+10];int head[N+10],tote=1;
inline void addEdge(int u,int v){e[++tote].to=v;e[tote].nxt=head[u];head[u]=tote;}
endsnippet

snippet wedge "Graph - weighted edge"
struct Edge{int to,nxt;${1:int} w;}e[${2:M}${3:*2}+10];int head[N+10],tote=1;
inline void addEdge(int u,int v,$1 w){e[++tote].to=v;e[tote].w=w;e[tote].nxt=head[u];head[u]=tote;}
endsnippet

snippet cedege "Graph - network flow (max flow)"
struct Edge{int to,nxt;${1:int} c;}e[M*2+10];int head[N+10],tote=1;
inline void addEdge(int u,int v,$1 c){e[++tote].to=v;e[tote].c=c;e[tote].nxt=head[u];head[u]=tote;}
inline void addFlow(int u,int v,$1 c){addEdge(u,v,c);addEdge(v,u,0);}
endsnippet

snippet tarjanv "Graph - Tarjan algorithm variables"
int dfn[N+10],low[N+10],cnt,stk[N+10],top,inStk[N+10],col[N+10],totScc;
endsnippet

snippet tarjand "Graph - Tarjan algorithm (directed graph)"
void DFS(int u){
	dfn[u]=low[u]=++cnt;
	stk[++top]=u,inStk[u]=1;
	for(int i=head[u];i;i=e[i].nxt){
		int v=e[i].to;
		if(!dfn[v])DFS(v),low[u]=std::min(low[u],low[v]);
		else if(inStk[v])low[u]=std::min(low[u],dfn[v]);
	}
	if(dfn[u]==low[u]){
		int v;totScc++;
		do v=stk[top--],inStk[v]=0,col[v]=totScc;while(u!=v);
	}
}
endsnippet

snippet tarjanu "Graph - Tarjan algorithm (undirected graph)"
void DFS(int u,int _fa){
	dfn[u]=low[u]=++cnt;
	stk[++top]=u,inStk[u]=1;
	for(int i=head[u];i;i=e[i].nxt){
		int v=e[i].to;
		if((i^1)==_fa)continue;
		if(!dfn[v])DFS(v,i),low[u]=std::min(low[u],low[v]);
		else if(inStk[v])low[u]=std::min(low[u],dfn[v]);
	}
	if(dfn[u]==low[u]){
		int v;totScc++;
		do v=stk[top--],inStk[v]=0,col[v]=totScc;while(u!=v);
	}
}
endsnippet
