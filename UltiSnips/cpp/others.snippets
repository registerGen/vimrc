snippet gen_template "Generator's template"
#include"testlib.h"

const char* name="data/";
const int T=20;

int a[N+10];

inline void open(int t){
	fprintf(stderr,"open(): file name is %s%d.in\n",name,t);
	char fname[100];
	sprintf(fname,"%s%d.in",name,t);
	if(freopen(fname,"w",stdout)==NULL){
		fprintf(stderr,"\033[31mopen(): cannot open file\033[0m\n");
		exit(0);
	}
}

inline void val(int t){
	fprintf(stderr,"val(): command is ./val <%s%d.in\n",name,t);
	char cmd[100];
	sprintf(cmd,"./val <%s%d.in",name,t);
	if(system(cmd)){
		fprintf(stderr,"\033[31mval(): validation failed\033[0m\n");
		exit(0);
	}
}

inline void genAns(int t){
	fprintf(stderr,"genAns(): command is ./std <%s%d.in >%s%d.ans\n",name,t,name,t);
	char cmd[100];
	sprintf(cmd,"./std <%s%d.in >%s%d.ans",name,t,name,t);
	if(system(cmd)){
		fprintf(stderr,"\033[31mgenAns(): answer file generation failed\033[0m\n");
		exit(0);
	}
}

int main(int argc,char** argv){
	registerGen(argc,argv,1);
	for(int t=1;t<=T;t++){
		open(t);
		gen(t);
		fclose(stdout);
		val(t);
		genAns(t);
		fprintf(stderr,"\033[32m%s%d.in/.ans generated\033[0m\n",name,t);
	}
	return 0;
}

endsnippet

snippet check
#include<cstdio>
#include<cstdlib>

int main(){
	int T=$1;
	for(int i=1;i<=T;i++){
		printf("Case #%d: ",i);
		system("./tmpgen >tmp.in");
		system("./brute <tmp.in >tmp.ans");
		system("./std <tmp.in >tmp.out");
		if(system("diff tmp.out tmp.ans >tmp.log"))
			return puts("WA"),0;
		puts("AC");
	}
	return 0;
}
endsnippet
